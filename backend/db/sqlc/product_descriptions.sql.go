// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: product_descriptions.sql

package db

import (
	"context"
)

const createProductDescription = `-- name: CreateProductDescription :one
INSERT INTO product_descriptions (product_translation_pk, introduction, prize, item_info, recommendation)
    VALUES ($1, $2, $3, $4, $5)
RETURNING pk, product_translation_pk, introduction, prize, item_info, recommendation
`

type CreateProductDescriptionParams struct {
	ProductTranslationPk int64  `json:"product_translation_pk"`
	Introduction         string `json:"introduction"`
	Prize                string `json:"prize"`
	ItemInfo             string `json:"item_info"`
	Recommendation       string `json:"recommendation"`
}

func (q *Queries) CreateProductDescription(ctx context.Context, arg CreateProductDescriptionParams) (ProductDescription, error) {
	row := q.db.QueryRow(ctx, createProductDescription,
		arg.ProductTranslationPk,
		arg.Introduction,
		arg.Prize,
		arg.ItemInfo,
		arg.Recommendation,
	)
	var i ProductDescription
	err := row.Scan(
		&i.Pk,
		&i.ProductTranslationPk,
		&i.Introduction,
		&i.Prize,
		&i.ItemInfo,
		&i.Recommendation,
	)
	return i, err
}

const deleteProductDescription = `-- name: DeleteProductDescription :exec
DELETE FROM product_descriptions
WHERE pk = $1
`

func (q *Queries) DeleteProductDescription(ctx context.Context, pk int64) error {
	_, err := q.db.Exec(ctx, deleteProductDescription, pk)
	return err
}

const getProductDescriptionByPk = `-- name: GetProductDescriptionByPk :one
SELECT
    pk, product_translation_pk, introduction, prize, item_info, recommendation
FROM
    product_descriptions
WHERE
    pk = $1
`

func (q *Queries) GetProductDescriptionByPk(ctx context.Context, pk int64) (ProductDescription, error) {
	row := q.db.QueryRow(ctx, getProductDescriptionByPk, pk)
	var i ProductDescription
	err := row.Scan(
		&i.Pk,
		&i.ProductTranslationPk,
		&i.Introduction,
		&i.Prize,
		&i.ItemInfo,
		&i.Recommendation,
	)
	return i, err
}

const getProductDescriptionsByTranslationPk = `-- name: GetProductDescriptionsByTranslationPk :one
SELECT
    pk, product_translation_pk, introduction, prize, item_info, recommendation
FROM
    product_descriptions
WHERE
    product_translation_pk = $1
`

func (q *Queries) GetProductDescriptionsByTranslationPk(ctx context.Context, productTranslationPk int64) (ProductDescription, error) {
	row := q.db.QueryRow(ctx, getProductDescriptionsByTranslationPk, productTranslationPk)
	var i ProductDescription
	err := row.Scan(
		&i.Pk,
		&i.ProductTranslationPk,
		&i.Introduction,
		&i.Prize,
		&i.ItemInfo,
		&i.Recommendation,
	)
	return i, err
}

const updateProductDescription = `-- name: UpdateProductDescription :one
UPDATE
    product_descriptions
SET
    product_translation_pk = $2,
    introduction = $3,
    prize = $4,
    item_info = $5,
    recommendation = $6
WHERE
    pk = $1
RETURNING pk, product_translation_pk, introduction, prize, item_info, recommendation
`

type UpdateProductDescriptionParams struct {
	Pk                   int64  `json:"pk"`
	ProductTranslationPk int64  `json:"product_translation_pk"`
	Introduction         string `json:"introduction"`
	Prize                string `json:"prize"`
	ItemInfo             string `json:"item_info"`
	Recommendation       string `json:"recommendation"`
}

func (q *Queries) UpdateProductDescription(ctx context.Context, arg UpdateProductDescriptionParams) (ProductDescription, error) {
	row := q.db.QueryRow(ctx, updateProductDescription,
		arg.Pk,
		arg.ProductTranslationPk,
		arg.Introduction,
		arg.Prize,
		arg.ItemInfo,
		arg.Recommendation,
	)
	var i ProductDescription
	err := row.Scan(
		&i.Pk,
		&i.ProductTranslationPk,
		&i.Introduction,
		&i.Prize,
		&i.ItemInfo,
		&i.Recommendation,
	)
	return i, err
}
